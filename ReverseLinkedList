// Question : Given the head of a singly linked list, reverse the list, and return the reversed list.
// Input : head = [1,2,3,4,5]
// Output : [5,4,3,2,1]

// Answer 

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;

        while(curr!=null){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }

        return prev;
    }
}

/* Why? Working with double Pointer , setting first element to null since the last element also points to null.
Then jump to the next node and change the pointer of this element to point at the prev element.
Self explaining and very important to learn
*/
